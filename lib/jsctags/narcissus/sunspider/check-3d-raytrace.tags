!_TAG_FILE_FORMAT	2	/extended format/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Patrick Walton	/pwalton@mozilla.com/
!_TAG_PROGRAM_NAME	jsctags	//
!_TAG_PROGRAM_URL	http://github.com/pcwalton/jsctags	/GitHub repository/
!_TAG_PROGRAM_VERSION	0.1	//
%anonymous_function	check-3d-raytrace.js	/^    var floorShader = function(tri, pos, view) {$/;"	f	type:any function(<undefined | Triangle>, Array[number], Array[number])
%anonymous_function	check-3d-raytrace.js	/^Camera.prototype.generateRayPair = function(y) {$/;"	f	type:any function(number)
%anonymous_function	check-3d-raytrace.js	/^Camera.prototype.render = function(scene, pixels, width, height) {$/;"	f	type:any function(Scene, Array[Array], number, number)
%anonymous_function	check-3d-raytrace.js	/^Scene.prototype.blocked = function(O, D, far) {$/;"	f	type:boolean function(Array[number], Array[number], number)
%anonymous_function	check-3d-raytrace.js	/^Scene.prototype.intersect = function(origin, dir, near, far) {$/;"	f	type:<undefined | Array[number]> function(Array[number], Array[number], <number | undefined>, <number | undefined>)
%anonymous_function	check-3d-raytrace.js	/^Triangle.prototype.intersect = function(orig, dir, near, far) {$/;"	f	type:<number | undefined> function(Array[number], Array[number], <number | undefined>, <number | undefined>)
Camera	check-3d-raytrace.js	/^function Camera(origin, lookat, up) {$/;"	f	type:Camera function(Array[number], Array[number], Array[number])
Scene	check-3d-raytrace.js	/^function Scene(a_triangles) {$/;"	f	type:Scene function(Array[Triangle])
Triangle	check-3d-raytrace.js	/^function Triangle(p1, p2, p3) {$/;"	f	type:Triangle function(Array[number], Array[number], Array[number])
add	check-3d-raytrace.js	/^function add(v1, v2) {$/;"	f	type:Array[number] function(Array[number], Array[number])
addVector	check-3d-raytrace.js	/^function addVector(self, v) {$/;"	f	type:Array[number] function(Array[number], <undefined | Array[number]>)
arrayToCanvasCommands	check-3d-raytrace.js	/^function arrayToCanvasCommands(pixels)$/;"	f	type:string function(Array[Array])
createVector	check-3d-raytrace.js	/^function createVector(x,y,z) {$/;"	f	type:Array[number] function(number, number, number)
cross	check-3d-raytrace.js	/^function cross(v1, v2) {$/;"	f	type:Array[number] function(Array[number], Array[number])
dot	check-3d-raytrace.js	/^function dot(v1, v2) {$/;"	f	type:number function(Array[number], Array[number])
invertMatrix	check-3d-raytrace.js	/^function invertMatrix(self) {$/;"	f	type:Array[number] function(Array[number])
lengthVector	check-3d-raytrace.js	/^function lengthVector(self) {$/;"	f	type:any function(Array[number])
normalise	check-3d-raytrace.js	/^function normalise(v) {$/;"	f	type:Array[number] function(Array[number])
normaliseVector	check-3d-raytrace.js	/^function normaliseVector(self) {$/;"	f	type:Array[number] function(Array[number])
raytraceScene	check-3d-raytrace.js	/^function raytraceScene()$/;"	f	type:Array[Array] function()
renderRows	check-3d-raytrace.js	/^function renderRows(camera, scene, pixels, width, height, starty, stopy) {$/;"	f	type:any function(Camera, Scene, Array[Array], number, number, number, number)
scale	check-3d-raytrace.js	/^function scale(v, scale) {$/;"	f	type:Array[number] function(<undefined | Array[number]>, <number | undefined>)
scaleVector	check-3d-raytrace.js	/^function scaleVector(self, scale) {$/;"	f	type:<undefined | Array[number]> function(<undefined | Array[number]>, <number | undefined>)
scalev	check-3d-raytrace.js	/^function scalev(v1, v2) {$/;"	f	type:Array[number] function(Array[number], <undefined | Array[number]>)
sqrLengthVector	check-3d-raytrace.js	/^function sqrLengthVector(self) {$/;"	f	type:number function(any)
sub	check-3d-raytrace.js	/^function sub(v1, v2) {$/;"	f	type:Array[number] function(<undefined | Array[number]>, Array[number])
subVector	check-3d-raytrace.js	/^function subVector(self, v) {$/;"	f	type:Array[number] function(Array[number], Array[number])
transformMatrix	check-3d-raytrace.js	/^function transformMatrix(self, v) {$/;"	f	type:Array[number] function(Array[number], Array[number])
